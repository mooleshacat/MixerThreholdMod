using MelonLoader;
using MelonLoader.Utils;
using Newtonsoft.Json;
using ScheduleOne.Management;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using UnityEngine;

namespace MixerThreholdMod_1_0_0.Utils
>using System.Threading;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using static HarmonyLib.Code;
using static MelonLoader.Modules.MelonModule;
using static MixerThreholdMod_1_0_0.Main;
using static ScheduleOne.Console;
using static MixerThreholdMod_1_0_0.Constants.ModConstants;

namespace MixerThreholdMod_0_0_1
        private static bool isBackupInProgress         private static readonly object backupLock         private static bool isSaveInProgress         private static readonly object saveLock         private static DateTime lastSaveTime         private static readonly TimeSpan SAVE_COOLDOWN         private static CancellationTokenSource saveCts         public static ConcurrentDictionary<int, float> SavedMixerValues             if (instance =                if (instance =            int waitAttempts             const int maxWaitAttempts             while (instance != null && instance.StartThrehold =            if (instance =            if (instance.StartThrehold =                if (Main.savedMixerValues !                    if (instance.StartThrehold.onItemChanged !                        instance.StartThrehold.onItemChanged.AddListener((float val)             bool loadCompleted             Exception loadError             Task.Run(async ()                     loadCompleted                     loadError                     loadCompleted             if (loadError !                string saveFile                     string json                         var data                         if (data !                            var mixerValues             while (config?.StartThrehold =            bool attachCompleted             bool eventAttached             Exception attachError             Task.Run(()                     eventAttached                     attachCompleted                     attachError                     attachCompleted             if (attachError !                var numberFieldType                 var eventNames                     var eventInfo                     if (eventInfo != null && eventInfo.EventHandlerType !                        var handler                         if (handler !                if (eventHandlerType =                    return new Action<float>((float newValue)                 else if (eventHandlerType =                    return new System.EventHandler((object sender, EventArgs e)                 else if (eventHandlerType.IsGenericType && eventHandlerType.GetGenericTypeDefinition() =                    var paramType                     if (paramType =                        return new Action<float>((float newValue)                 bool hasOldValue                 if (sender !                    var senderType                     var valueProperty                     if (valueProperty != null && valueProperty.PropertyType =                        float currentValue                 while (instance != null && instance.StartThrehold =                if (instance =                if (instance.StartThrehold ==            float lastKnownValue             bool hasInitialValue             while (config?.StartThrehold !                Exception pollError                 float? currentValue                     currentValue                     pollError                     instance.StartThrehold.onItemChanged.AddListener((float val) =                if (pollError =                        lastKnownValue                         hasInitialValue                         lastKnownValue                 if (pollError !                if (numberField =                var type                 var propertyNames                     var property                     if (property != null && property.PropertyType =                var methodNames                     var method                     if (method != null && method.ReturnType =            bool canProceed                     isSaveInProgress                     lastSaveTime                     canProceed                     isSaveInProgress             if (Main.savedMixerValues.Count =                    isSaveInProgress             bool needsBackup             bool saveCompleted             Exception saveError             Task.Run(async ()                     saveCompleted                     saveError                     saveCompleted                 isSaveInProgress             if (saveError !                string saveFile                 var mixerValuesDict                     mixerValuesDict[kvp.Key]                 var saveData                     [MIXER_VALUES_KEY]                     [SAVE_TIME_KEY]                     [VERSION_KEY]                 string json                 string persistentPath                     string persistentFile             bool canProceed                     isBackupInProgress                     canProceed                     isBackupInProgress             bool backupCompleted             Exception backupError             Task.Run(()                     backupCompleted                     backupError                     backupCompleted                 isBackupInProgress             if (backupError !            string backupDir             string sourceFile             string timestamp             string backupFile             var allBackupFiles                 var sortedBackups = allBackupFiles.OrderByDescending(f                 var oldBackups                 string backupDir                 var allBackupFiles                 var latestBackup = allBackupFiles.OrderByDescending(f                 if (latestBackup =                yield return Task.Run(()                 if (saveCts !                if (Main.savedMixerValues.Count =                string persistentPath                 string emergencyFile                 var mixerValuesDict                     mixerValuesDict[kvp.Key]                 var saveData                     [MIXER_VALUES_KEY]                     [SAVE_TIME_KEY]                     ["Reason"]                 string json                 saveCts                 Task.Run(async ()                 string path                 var saveData                     MixerValues                 string json                 bool success                     token             Action<int, string> logger             string normalizedPath             for (int attempt = 1; attempt <                    using (var locker                         using (var writer         public static bool _hasLoggedZeroMixers             yield return Task.Run(async ()                 string filePath                     filePath                     var _mixerCount = await TrackedMixers.CountAsync(tm => tm !                    var mixerIds = await TrackedMixers.SelectAsync(tm                     var validMixerIds = mixerIds?.Where(id => id !                    if (_mixerCount =                        var _mixerCount = await TrackedMixers.CountAsync(tm                         Main.logger.Msg(3, $"Currently tracking {_mixerCount} mixers: {string.Join(", ", await TrackedMixers.SelectAsync(tm                         if (_mixerCount =                            _hasLoggedZeroMixers                     var mixerDataSnapshot                     var trackedMixers                     if (trackedMixers =                            if (tm =                            if (tm.ConfigInstance =                            if (tm.ConfigInstance.StartThrehold =                                float currentValue                                 mixerDataSnapshot[tm.MixerInstanceID]                     if (mixerDataSnapshot.Count =                    string json                         MixerValues                     bool success                     int attempts                     const int maxAttempts                             success         private static bool _hasLoaded         private static object _loadLock                     _hasLoaded             int attempts             const int maxAttempts             string saveDir             string path                 string json                 var saveData                     string savePath                     string persistentPath                     pathsToTry                     string persistentPath                     pathsToTry                     string savePath                     string persistentPath                     pathsToTry                     string persistentPath                     pathsToTry                             string json                             MixerThresholdSaveData data                             if (data?.MixerValues =                                    if (SavedMixerValues !                                        SavedMixerValues[kvp.Key]                                     Main.logger.Err($"LoadAndApplyMixerThresholds: Error processing mixer value {kvp.Key}                            var trackedMixers                             if (trackedMixers !                                        if (tm =                                        if (tm.ConfigInstance?.StartThrehold !                                            SavedMixerValues !            public Dictionary<int, float> MixerValues }